library ieee;
use ieee.std_logic_1164.all;

entity Reaction_Time is
		port(Clock: in std_logic;
			start1: in std_logic;
			react1: in std_logic;
			reset1: in std_logic;
			sev_seg3,sev_seg2,sev_seg1,sev_seg0,sev_segS: out std_logic_vector(6 downto 0);
			done: out std_logic);
end Reaction_Time;

Architecture port_map of Reaction_Time is

component reaction_timer is
	  port( CLK: in std_logic;
			start: in std_logic;
			react: in std_logic;
			reset: in std_logic;
			
			Output3,Output2,Output1,Output0,memory:out integer;
			done: out std_logic);
			
end component;	

component clock_divider is
	port (clock: in STD_Logic;
			reset: in std_logic;
			divided_clock: out std_logic);
end component;

component Seven_Seg is
	  port( Input3,Input2,Input1,Input0,InputS:in integer;
			seg7a3,seg7a2,seg7a1,seg7a0,seg7s:out std_logic_vector(6 downto 0));
			
end component;

signal div_clk :std_logic;
signal out3,out2,out1,out0,outMem: integer;

begin

Adder1: clock_divider port map
	(clock=>Clock,
	reset=>reset1,
	divided_clock=>div_clk);

Adder2: reaction_timer port map
		(CLK=>div_clk,
		start=>start1,
		react=>react1,
		reset=>reset1,
		Output3=>out3,
		Output2=>out2,
		Output1=>out1,
		Output0=>out0,
		memory=>outMem,
		done=>done);
		
Adder3: Seven_Seg port map
		(Input3=>out3,
		Input2=>out2,
		Input1=>out1,
		Input0=>out0,
		InputS=>outMem,
		seg7a3=>sev_seg3,
		seg7a2=>sev_seg2,
		seg7a1=>sev_seg1,
		seg7a0=>sev_seg0,
		seg7s=>sev_segS);
		
		
end port_map;